// Generated by rstantools.  Do not edit by hand.

/*
    scSFMnet is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    scSFMnet is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with scSFMnet.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_sfm_shs_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sfm_shs");
    reader.add_event(104, 102, "end", "model_sfm_shs");
    return reader;
}
#include <stan_meta_header.hpp>
class model_sfm_shs
  : public stan::model::model_base_crtp<model_sfm_shs> {
private:
        int G;
        int N;
        int Fac;
        std::vector<std::vector<int> > Y;
        std::vector<int> t_i;
public:
    model_sfm_shs(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sfm_shs(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sfm_shs_namespace::model_sfm_shs";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Fac", "int", context__.to_vec());
            Fac = int(0);
            vals_i__ = context__.vals_i("Fac");
            pos__ = 0;
            Fac = vals_i__[pos__++];
            check_greater_or_equal(function__, "Fac", Fac, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("Y", "G", G);
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(G,N));
            Y = std::vector<std::vector<int> >(G, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = G;
            size_t Y_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t Y_i_0_max__ = G;
            size_t Y_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Y_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Y[i_0__][i_1__]", Y[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("t_i", "N", N);
            context__.validate_dims("data initialization", "t_i", "int", context__.to_vec(N));
            t_i = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("t_i");
            pos__ = 0;
            size_t t_i_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < t_i_k_0_max__; ++k_0__) {
                t_i[k_0__] = vals_i__[pos__++];
            }
            size_t t_i_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < t_i_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_i[i_0__]", t_i[i_0__], 0);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 10;
            validate_non_negative_index("lambda", "Fac", Fac);
            validate_non_negative_index("lambda", "N", N);
            num_params_r__ += (Fac * N);
            current_statement_begin__ = 11;
            validate_non_negative_index("alpha_0", "G", G);
            validate_non_negative_index("alpha_0", "Fac", Fac);
            num_params_r__ += (G * Fac);
            current_statement_begin__ = 12;
            validate_non_negative_index("alpha_1", "G", G);
            validate_non_negative_index("alpha_1", "Fac", Fac);
            num_params_r__ += (G * Fac);
            current_statement_begin__ = 13;
            validate_non_negative_index("alpha_star", "G", G);
            validate_non_negative_index("alpha_star", "Fac", Fac);
            num_params_r__ += (G * Fac);
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            validate_non_negative_index("beta", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 16;
            validate_non_negative_index("delta", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            validate_non_negative_index("tau", "Fac", Fac);
            num_params_r__ += Fac;
            current_statement_begin__ = 21;
            validate_non_negative_index("eta0", "G", G);
            validate_non_negative_index("eta0", "Fac", Fac);
            num_params_r__ += (G * Fac);
            current_statement_begin__ = 22;
            validate_non_negative_index("eta1", "G", G);
            validate_non_negative_index("eta1", "Fac", Fac);
            num_params_r__ += (G * Fac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sfm_shs() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 10;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "Fac", Fac);
        validate_non_negative_index("lambda", "N", N);
        context__.validate_dims("parameter initialization", "lambda", "matrix_d", context__.to_vec(Fac,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda(Fac, N);
        size_t lambda_j_2_max__ = N;
        size_t lambda_j_1_max__ = Fac;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                lambda(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 11;
        if (!(context__.contains_r("alpha_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_0");
        pos__ = 0U;
        validate_non_negative_index("alpha_0", "G", G);
        validate_non_negative_index("alpha_0", "Fac", Fac);
        context__.validate_dims("parameter initialization", "alpha_0", "matrix_d", context__.to_vec(G,Fac));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_0(G, Fac);
        size_t alpha_0_j_2_max__ = Fac;
        size_t alpha_0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_0_j_1_max__; ++j_1__) {
                alpha_0(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(alpha_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("alpha_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_1");
        pos__ = 0U;
        validate_non_negative_index("alpha_1", "G", G);
        validate_non_negative_index("alpha_1", "Fac", Fac);
        context__.validate_dims("parameter initialization", "alpha_1", "matrix_d", context__.to_vec(G,Fac));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_1(G, Fac);
        size_t alpha_1_j_2_max__ = Fac;
        size_t alpha_1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                alpha_1(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(alpha_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("alpha_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_star");
        pos__ = 0U;
        validate_non_negative_index("alpha_star", "G", G);
        validate_non_negative_index("alpha_star", "Fac", Fac);
        context__.validate_dims("parameter initialization", "alpha_star", "matrix_d", context__.to_vec(G,Fac));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_star(G, Fac);
        size_t alpha_star_j_2_max__ = Fac;
        size_t alpha_star_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_star_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_star_j_1_max__; ++j_1__) {
                alpha_star(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(alpha_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("zeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "zeta", "double", context__.to_vec());
        double zeta(0);
        zeta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, zeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "G", G);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(G);
        size_t beta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "G", G);
        context__.validate_dims("parameter initialization", "delta", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta(G);
        size_t delta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            delta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("sigma_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_b", "double", context__.to_vec());
        double sigma_b(0);
        sigma_b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("sigma_d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_d");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_d", "double", context__.to_vec());
        double sigma_d(0);
        sigma_d = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_d);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_d: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "Fac", Fac);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(Fac));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(Fac);
        size_t tau_j_1_max__ = Fac;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            tau(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("eta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta0");
        pos__ = 0U;
        validate_non_negative_index("eta0", "G", G);
        validate_non_negative_index("eta0", "Fac", Fac);
        context__.validate_dims("parameter initialization", "eta0", "matrix_d", context__.to_vec(G,Fac));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta0(G, Fac);
        size_t eta0_j_2_max__ = Fac;
        size_t eta0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                eta0(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, eta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("eta1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta1");
        pos__ = 0U;
        validate_non_negative_index("eta1", "G", G);
        validate_non_negative_index("eta1", "Fac", Fac);
        context__.validate_dims("parameter initialization", "eta1", "matrix_d", context__.to_vec(G,Fac));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta1(G, Fac);
        size_t eta1_j_2_max__ = Fac;
        size_t eta1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta1_j_1_max__; ++j_1__) {
                eta1(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, eta1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 10;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.matrix_constrain(Fac, N, lp__);
            else
                lambda = in__.matrix_constrain(Fac, N);
            current_statement_begin__ = 11;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_0;
            (void) alpha_0;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_0 = in__.matrix_constrain(G, Fac, lp__);
            else
                alpha_0 = in__.matrix_constrain(G, Fac);
            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_1;
            (void) alpha_1;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_1 = in__.matrix_constrain(G, Fac, lp__);
            else
                alpha_1 = in__.matrix_constrain(G, Fac);
            current_statement_begin__ = 13;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_star;
            (void) alpha_star;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_star = in__.matrix_constrain(G, Fac, lp__);
            else
                alpha_star = in__.matrix_constrain(G, Fac);
            current_statement_begin__ = 14;
            local_scalar_t__ zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.scalar_lb_constrain(0, lp__);
            else
                zeta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(G, lp__);
            else
                beta = in__.vector_constrain(G);
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta;
            (void) delta;  // dummy to suppress unused var warning
            if (jacobian__)
                delta = in__.vector_constrain(G, lp__);
            else
                delta = in__.vector_constrain(G);
            current_statement_begin__ = 17;
            local_scalar_t__ sigma_b;
            (void) sigma_b;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_b = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 18;
            local_scalar_t__ sigma_d;
            (void) sigma_d;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_d = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_d = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0, Fac, lp__);
            else
                tau = in__.vector_lb_constrain(0, Fac);
            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta0;
            (void) eta0;  // dummy to suppress unused var warning
            if (jacobian__)
                eta0 = in__.matrix_lb_constrain(0, G, Fac, lp__);
            else
                eta0 = in__.matrix_lb_constrain(0, G, Fac);
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta1;
            (void) eta1;  // dummy to suppress unused var warning
            if (jacobian__)
                eta1 = in__.matrix_lb_constrain(0, G, Fac, lp__);
            else
                eta1 = in__.matrix_lb_constrain(0, G, Fac);
            // transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("sq_alpha_0", "G", G);
            validate_non_negative_index("sq_alpha_0", "Fac", Fac);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sq_alpha_0(G, Fac);
            stan::math::initialize(sq_alpha_0, DUMMY_VAR__);
            stan::math::fill(sq_alpha_0, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("sq_alpha_1", "G", G);
            validate_non_negative_index("sq_alpha_1", "Fac", Fac);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sq_alpha_1(G, Fac);
            stan::math::initialize(sq_alpha_1, DUMMY_VAR__);
            stan::math::fill(sq_alpha_1, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 29;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 30;
                for (int f = 1; f <= Fac; ++f) {
                    current_statement_begin__ = 31;
                    stan::model::assign(sq_alpha_0, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                                square(get_base1(alpha_0, g, f, "alpha_0", 1)), 
                                "assigning variable sq_alpha_0");
                    current_statement_begin__ = 32;
                    stan::model::assign(sq_alpha_1, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                                square(get_base1(alpha_1, g, f, "alpha_1", 1)), 
                                "assigning variable sq_alpha_1");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            size_t sq_alpha_0_j_1_max__ = G;
            size_t sq_alpha_0_j_2_max__ = Fac;
            for (size_t j_1__ = 0; j_1__ < sq_alpha_0_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < sq_alpha_0_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(sq_alpha_0(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sq_alpha_0" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sq_alpha_0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 27;
            size_t sq_alpha_1_j_1_max__ = G;
            size_t sq_alpha_1_j_2_max__ = Fac;
            for (size_t j_1__ = 0; j_1__ < sq_alpha_1_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < sq_alpha_1_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(sq_alpha_1(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sq_alpha_1" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sq_alpha_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 39;
            validate_non_negative_index("a0_l", "G", G);
            validate_non_negative_index("a0_l", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a0_l(G, N);
            stan::math::initialize(a0_l, DUMMY_VAR__);
            stan::math::fill(a0_l, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("a1_l", "G", G);
            validate_non_negative_index("a1_l", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a1_l(G, N);
            stan::math::initialize(a1_l, DUMMY_VAR__);
            stan::math::fill(a1_l, DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("l_adjust0", "G", G);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_adjust0(G);
            stan::math::initialize(l_adjust0, DUMMY_VAR__);
            stan::math::fill(l_adjust0, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("l_adjust1", "G", G);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_adjust1(G);
            stan::math::initialize(l_adjust1, DUMMY_VAR__);
            stan::math::fill(l_adjust1, DUMMY_VAR__);
            current_statement_begin__ = 43;
            stan::math::assign(a0_l, multiply(alpha_0, lambda));
            current_statement_begin__ = 44;
            stan::math::assign(a1_l, multiply(alpha_1, lambda));
            current_statement_begin__ = 46;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 47;
                stan::model::assign(l_adjust0, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (sum(stan::model::rvalue(sq_alpha_0, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_0")) / 2), 
                            "assigning variable l_adjust0");
                current_statement_begin__ = 48;
                stan::model::assign(l_adjust1, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (sum(stan::model::rvalue(sq_alpha_1, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_1")) / 2), 
                            "assigning variable l_adjust1");
                current_statement_begin__ = 49;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 50;
                    if (as_bool(logical_eq(get_base1(t_i, i, "t_i", 1), 0))) {
                        current_statement_begin__ = 52;
                        lp_accum__.add(poisson_log_log<propto__>(get_base1(get_base1(Y, g, "Y", 1), i, "Y", 2), ((get_base1(beta, g, "beta", 1) + get_base1(a0_l, g, i, "a0_l", 1)) - get_base1(l_adjust0, g, "l_adjust0", 1))));
                    } else {
                        current_statement_begin__ = 55;
                        lp_accum__.add(poisson_log_log<propto__>(get_base1(get_base1(Y, g, "Y", 1), i, "Y", 2), (((get_base1(delta, g, "delta", 1) + get_base1(beta, g, "beta", 1)) + get_base1(a1_l, g, i, "a1_l", 1)) - get_base1(l_adjust1, g, "l_adjust1", 1))));
                    }
                }
            }
            current_statement_begin__ = 61;
            for (int f = 1; f <= Fac; ++f) {
                current_statement_begin__ = 63;
                for (int g = 1; g <= G; ++g) {
                    current_statement_begin__ = 64;
                    lp_accum__.add(normal_log<propto__>(get_base1(alpha_star, g, f, "alpha_star", 1), 0, zeta));
                    current_statement_begin__ = 65;
                    lp_accum__.add(normal_log<propto__>(get_base1(alpha_0, g, f, "alpha_0", 1), get_base1(alpha_star, g, f, "alpha_star", 1), (get_base1(eta0, g, f, "eta0", 1) * get_base1(tau, f, "tau", 1))));
                    current_statement_begin__ = 66;
                    lp_accum__.add(normal_log<propto__>(get_base1(alpha_1, g, f, "alpha_1", 1), get_base1(alpha_star, g, f, "alpha_star", 1), (get_base1(eta1, g, f, "eta1", 1) * get_base1(tau, f, "tau", 1))));
                }
            }
            current_statement_begin__ = 69;
            lp_accum__.add(normal_log<propto__>(to_vector(lambda), 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(cauchy_log<propto__>(zeta, 0, 1));
            current_statement_begin__ = 73;
            lp_accum__.add(normal_log<propto__>(beta, 0, sigma_b));
            current_statement_begin__ = 74;
            lp_accum__.add(normal_log<propto__>(delta, 0, sigma_d));
            current_statement_begin__ = 75;
            lp_accum__.add(cauchy_log<propto__>(sigma_b, 0, 1));
            current_statement_begin__ = 76;
            lp_accum__.add(cauchy_log<propto__>(sigma_d, 0, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(cauchy_log<propto__>(tau, 0, 1));
            current_statement_begin__ = 80;
            lp_accum__.add(cauchy_log<propto__>(to_vector(eta0), 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(cauchy_log<propto__>(to_vector(eta1), 0, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("alpha_0");
        names__.push_back("alpha_1");
        names__.push_back("alpha_star");
        names__.push_back("zeta");
        names__.push_back("beta");
        names__.push_back("delta");
        names__.push_back("sigma_b");
        names__.push_back("sigma_d");
        names__.push_back("tau");
        names__.push_back("eta0");
        names__.push_back("eta1");
        names__.push_back("sq_alpha_0");
        names__.push_back("sq_alpha_1");
        names__.push_back("cov_mu_mu0");
        names__.push_back("corr_mu_mu0");
        names__.push_back("cov_mu_mu1");
        names__.push_back("corr_mu_mu1");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Fac);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(Fac);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sfm_shs_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda = in__.matrix_constrain(Fac, N);
        size_t lambda_j_2_max__ = N;
        size_t lambda_j_1_max__ = Fac;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                vars__.push_back(lambda(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_0 = in__.matrix_constrain(G, Fac);
        size_t alpha_0_j_2_max__ = Fac;
        size_t alpha_0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_0_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_0(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_1 = in__.matrix_constrain(G, Fac);
        size_t alpha_1_j_2_max__ = Fac;
        size_t alpha_1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_1(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> alpha_star = in__.matrix_constrain(G, Fac);
        size_t alpha_star_j_2_max__ = Fac;
        size_t alpha_star_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_star_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_star_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_star(j_1__, j_2__));
            }
        }
        double zeta = in__.scalar_lb_constrain(0);
        vars__.push_back(zeta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(G);
        size_t beta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta = in__.vector_constrain(G);
        size_t delta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            vars__.push_back(delta(j_1__));
        }
        double sigma_b = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_b);
        double sigma_d = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_d);
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_lb_constrain(0, Fac);
        size_t tau_j_1_max__ = Fac;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            vars__.push_back(tau(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta0 = in__.matrix_lb_constrain(0, G, Fac);
        size_t eta0_j_2_max__ = Fac;
        size_t eta0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                vars__.push_back(eta0(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta1 = in__.matrix_lb_constrain(0, G, Fac);
        size_t eta1_j_2_max__ = Fac;
        size_t eta1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta1_j_1_max__; ++j_1__) {
                vars__.push_back(eta1(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("sq_alpha_0", "G", G);
            validate_non_negative_index("sq_alpha_0", "Fac", Fac);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sq_alpha_0(G, Fac);
            stan::math::initialize(sq_alpha_0, DUMMY_VAR__);
            stan::math::fill(sq_alpha_0, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("sq_alpha_1", "G", G);
            validate_non_negative_index("sq_alpha_1", "Fac", Fac);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sq_alpha_1(G, Fac);
            stan::math::initialize(sq_alpha_1, DUMMY_VAR__);
            stan::math::fill(sq_alpha_1, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 29;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 30;
                for (int f = 1; f <= Fac; ++f) {
                    current_statement_begin__ = 31;
                    stan::model::assign(sq_alpha_0, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                                square(get_base1(alpha_0, g, f, "alpha_0", 1)), 
                                "assigning variable sq_alpha_0");
                    current_statement_begin__ = 32;
                    stan::model::assign(sq_alpha_1, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                                square(get_base1(alpha_1, g, f, "alpha_1", 1)), 
                                "assigning variable sq_alpha_1");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t sq_alpha_0_j_2_max__ = Fac;
                size_t sq_alpha_0_j_1_max__ = G;
                for (size_t j_2__ = 0; j_2__ < sq_alpha_0_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < sq_alpha_0_j_1_max__; ++j_1__) {
                        vars__.push_back(sq_alpha_0(j_1__, j_2__));
                    }
                }
                size_t sq_alpha_1_j_2_max__ = Fac;
                size_t sq_alpha_1_j_1_max__ = G;
                for (size_t j_2__ = 0; j_2__ < sq_alpha_1_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < sq_alpha_1_j_1_max__; ++j_1__) {
                        vars__.push_back(sq_alpha_1(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 87;
            validate_non_negative_index("cov_mu_mu0", "G", G);
            validate_non_negative_index("cov_mu_mu0", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> cov_mu_mu0(G, G);
            stan::math::initialize(cov_mu_mu0, DUMMY_VAR__);
            stan::math::fill(cov_mu_mu0, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("corr_mu_mu0", "G", G);
            validate_non_negative_index("corr_mu_mu0", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mu_mu0(G, G);
            stan::math::initialize(corr_mu_mu0, DUMMY_VAR__);
            stan::math::fill(corr_mu_mu0, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("cov_mu_mu1", "G", G);
            validate_non_negative_index("cov_mu_mu1", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> cov_mu_mu1(G, G);
            stan::math::initialize(cov_mu_mu1, DUMMY_VAR__);
            stan::math::fill(cov_mu_mu1, DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("corr_mu_mu1", "G", G);
            validate_non_negative_index("corr_mu_mu1", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mu_mu1(G, G);
            stan::math::initialize(corr_mu_mu1, DUMMY_VAR__);
            stan::math::fill(corr_mu_mu1, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 92;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 93;
                for (int h = 1; h <= G; ++h) {
                    current_statement_begin__ = 94;
                    stan::model::assign(cov_mu_mu0, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(h), stan::model::nil_index_list())), 
                                dot_product(stan::model::rvalue(alpha_0, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha_0"), stan::model::rvalue(alpha_0, stan::model::cons_list(stan::model::index_uni(h), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha_0")), 
                                "assigning variable cov_mu_mu0");
                    current_statement_begin__ = 95;
                    stan::model::assign(corr_mu_mu0, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(h), stan::model::nil_index_list())), 
                                (get_base1(cov_mu_mu0, g, h, "cov_mu_mu0", 1) / stan::math::sqrt((sum(stan::model::rvalue(sq_alpha_0, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_0")) * sum(stan::model::rvalue(sq_alpha_0, stan::model::cons_list(stan::model::index_uni(h), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_0"))))), 
                                "assigning variable corr_mu_mu0");
                    current_statement_begin__ = 96;
                    stan::model::assign(cov_mu_mu1, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(h), stan::model::nil_index_list())), 
                                dot_product(stan::model::rvalue(alpha_1, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha_1"), stan::model::rvalue(alpha_1, stan::model::cons_list(stan::model::index_uni(h), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "alpha_1")), 
                                "assigning variable cov_mu_mu1");
                    current_statement_begin__ = 97;
                    stan::model::assign(corr_mu_mu1, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(h), stan::model::nil_index_list())), 
                                (get_base1(cov_mu_mu1, g, h, "cov_mu_mu1", 1) / stan::math::sqrt((sum(stan::model::rvalue(sq_alpha_1, stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_1")) * sum(stan::model::rvalue(sq_alpha_1, stan::model::cons_list(stan::model::index_uni(h), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sq_alpha_1"))))), 
                                "assigning variable corr_mu_mu1");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 87;
            size_t cov_mu_mu0_j_2_max__ = G;
            size_t cov_mu_mu0_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < cov_mu_mu0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_mu_mu0_j_1_max__; ++j_1__) {
                    vars__.push_back(cov_mu_mu0(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 88;
            size_t corr_mu_mu0_j_2_max__ = G;
            size_t corr_mu_mu0_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < corr_mu_mu0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corr_mu_mu0_j_1_max__; ++j_1__) {
                    vars__.push_back(corr_mu_mu0(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 89;
            size_t cov_mu_mu1_j_2_max__ = G;
            size_t cov_mu_mu1_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < cov_mu_mu1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_mu_mu1_j_1_max__; ++j_1__) {
                    vars__.push_back(cov_mu_mu1(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 90;
            size_t corr_mu_mu1_j_2_max__ = G;
            size_t corr_mu_mu1_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < corr_mu_mu1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corr_mu_mu1_j_1_max__; ++j_1__) {
                    vars__.push_back(corr_mu_mu1(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_sfm_shs";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_j_2_max__ = N;
        size_t lambda_j_1_max__ = Fac;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_0_j_2_max__ = Fac;
        size_t alpha_0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_1_j_2_max__ = Fac;
        size_t alpha_1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_star_j_2_max__ = Fac;
        size_t alpha_star_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_star_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_star_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_star" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_d";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_j_1_max__ = Fac;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta0_j_2_max__ = Fac;
        size_t eta0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta1_j_2_max__ = Fac;
        size_t eta1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sq_alpha_0_j_2_max__ = Fac;
            size_t sq_alpha_0_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < sq_alpha_0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sq_alpha_0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sq_alpha_0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sq_alpha_1_j_2_max__ = Fac;
            size_t sq_alpha_1_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < sq_alpha_1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sq_alpha_1_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sq_alpha_1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t cov_mu_mu0_j_2_max__ = G;
        size_t cov_mu_mu0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < cov_mu_mu0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cov_mu_mu0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cov_mu_mu0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mu_mu0_j_2_max__ = G;
        size_t corr_mu_mu0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < corr_mu_mu0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mu_mu0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mu_mu0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cov_mu_mu1_j_2_max__ = G;
        size_t cov_mu_mu1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < cov_mu_mu1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cov_mu_mu1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cov_mu_mu1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mu_mu1_j_2_max__ = G;
        size_t corr_mu_mu1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < corr_mu_mu1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mu_mu1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mu_mu1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_j_2_max__ = N;
        size_t lambda_j_1_max__ = Fac;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_0_j_2_max__ = Fac;
        size_t alpha_0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_1_j_2_max__ = Fac;
        size_t alpha_1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_star_j_2_max__ = Fac;
        size_t alpha_star_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < alpha_star_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < alpha_star_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_star" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_d";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_j_1_max__ = Fac;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta0_j_2_max__ = Fac;
        size_t eta0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta1_j_2_max__ = Fac;
        size_t eta1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < eta1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < eta1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sq_alpha_0_j_2_max__ = Fac;
            size_t sq_alpha_0_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < sq_alpha_0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sq_alpha_0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sq_alpha_0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sq_alpha_1_j_2_max__ = Fac;
            size_t sq_alpha_1_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < sq_alpha_1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sq_alpha_1_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sq_alpha_1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t cov_mu_mu0_j_2_max__ = G;
        size_t cov_mu_mu0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < cov_mu_mu0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cov_mu_mu0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cov_mu_mu0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mu_mu0_j_2_max__ = G;
        size_t corr_mu_mu0_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < corr_mu_mu0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mu_mu0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mu_mu0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cov_mu_mu1_j_2_max__ = G;
        size_t cov_mu_mu1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < cov_mu_mu1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cov_mu_mu1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cov_mu_mu1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mu_mu1_j_2_max__ = G;
        size_t corr_mu_mu1_j_1_max__ = G;
        for (size_t j_2__ = 0; j_2__ < corr_mu_mu1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mu_mu1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mu_mu1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_sfm_shs_namespace::model_sfm_shs stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
